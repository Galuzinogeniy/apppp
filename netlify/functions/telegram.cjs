// netlify/functions/telegram.cjs
'use strict';

const { getStore } = require('@netlify/blobs');

const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID || ''; // –º–æ–∂–Ω–æ –ø—É—Å—Ç—ã–º
const WEBAPP_URL = process.env.WEBAPP_URL;
const ADMIN_SECRET = process.env.ADMIN_SECRET;

function escapeHtml(s) {
  s = s || '';
  return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}

async function tg(method, payload) {
  const url = 'https://api.telegram.org/bot' + BOT_TOKEN + '/' + method;
  await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  });
}

// --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–¥–º–∏–Ω–æ–≤ –≤ Netlify Blobs ---
async function addAdmin(id) {
  const store = getStore({ name: 'admins' });
  await store.set(String(id), '1');
}
async function removeAdmin(id) {
  const store = getStore({ name: 'admins' });
  await store.delete(String(id));
}
async function isAdmin(id) {
  const store = getStore({ name: 'admins' });
  const val = await store.get(String(id));
  return !!val;
}

exports.handler = async (event) => {
  if (event.httpMethod !== 'POST') {
    return { statusCode: 200, body: 'OK' };
  }

  if (!BOT_TOKEN || !WEBAPP_URL || !ADMIN_SECRET) {
    console.error('Missing env BOT_TOKEN/WEBAPP_URL/ADMIN_SECRET');
    return { statusCode: 500, body: 'Missing env' };
  }

  let update;
  try {
    update = JSON.parse(event.body);
  } catch (e) {
    console.error('Bad JSON', e);
    return { statusCode: 200, body: 'no json' };
  }

  const msg = update && update.message;
  const chatId = msg && msg.chat && msg.chat.id;

  try {
    // /start ‚Äî –ø—Ä–∏—Å—ã–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
    if (msg && msg.text === '/start') {
      await tg('sendMessage', {
        chat_id: chatId,
        text: '–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫—Ä—É–∂–∫–æ–≤:',
        reply_markup: {
          keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –∫—Ä—É–∂–∫–∏', web_app: { url: WEBAPP_URL } }]],
          resize_keyboard: true,
          is_persistent: true
        }
      });
    }

    // /admin <–∫–æ–¥> ‚Äî –≤—ã–¥–∞—ë–º –ø—Ä–∞–≤–∞, –µ—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π
    if (msg && typeof msg.text === 'string' && msg.text.indexOf('/admin') === 0) {
      const parts = msg.text.trim().split(/\s+/);
      const code = parts[1];
      if (!code) {
        await tg('sendMessage', { chat_id: chatId, text: '–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥: /admin <–∫–æ–¥>' });
      } else if (code === ADMIN_SECRET) {
        await addAdmin(chatId);
        await tg('sendMessage', { chat_id: chatId, text: '–ì–æ—Ç–æ–≤–æ. –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω ‚úÖ –û—Ç–∫—Ä–æ–π—Ç–µ WebApp –∑–∞–Ω–æ–≤–æ.' });
        if (ADMIN_CHAT_ID) {
          await tg('sendMessage', { chat_id: ADMIN_CHAT_ID, text: 'üõ° –í—ã–¥–∞–ª –∞–¥–º–∏–Ω–∞ –¥–ª—è ' + chatId });
        }
      } else {
        await tg('sendMessage', { chat_id: chatId, text: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ ‚ùå' });
      }
    }

    // /revoke ‚Äî —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —É —Å–µ–±—è
    if (msg && msg.text === '/revoke') {
      await removeAdmin(chatId);
      await tg('sendMessage', { chat_id: chatId, text: '–ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á—ë–Ω.' });
    }

    // –î–∞–Ω–Ω—ã–µ –∏–∑ WebApp (Telegram.WebApp.sendData)
    const wad = msg && msg.web_app_data;
    if (wad && wad.data) {
      let payload;
      try { payload = JSON.parse(wad.data); } catch (e) { payload = { raw: wad.data }; }

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
      if (ADMIN_CHAT_ID) {
        const who = (msg.from && msg.from.username) ? '@' + msg.from.username : '‚Äî';
        const uid = (msg.from && msg.from.id) ? String(msg.from.id) : '‚Äî';
        const body =
          '<b>WebApp –¥–∞–Ω–Ω—ã–µ</b>\n' +
          '–û—Ç: ' + who + ' (id ' + uid + ')\n\n' +
          '<pre>' + escapeHtml(JSON.stringify(payload, null, 2)) + '</pre>';

        await tg('sendMessage', {
          chat_id: ADMIN_CHAT_ID,
          parse_mode: 'HTML',
          text: body
        });
      }

      await tg('sendMessage', { chat_id: chatId, text: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã ‚úÖ –°–ø–∞—Å–∏–±–æ!' });
    }
  } catch (e) {
    console.error('Handler error', e);
  }

  return { statusCode: 200, body: 'OK' };
};
