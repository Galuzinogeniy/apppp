// netlify/functions/telegram.cjs
const { getStore } = require('@netlify/blobs');

const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID; // –∫–æ–º—É —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const WEBAPP_URL = process.env.WEBAPP_URL;       // https://<—Ç–≤–æ–π>.netlify.app
const ADMIN_SECRET = process.env.ADMIN_SECRET;   // —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤

function escapeHtml(s = '') {
  return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}
async function tg(method, payload) {
  await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/${method}`, {
    method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload)
  });
}

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–¥–º–∏–Ω–æ–≤ –≤ Netlify Blobs
async function addAdmin(id) {
  const store = getStore({ name: 'admins' });
  const key = String(id);
  await store.set(key, '1');
}
async function removeAdmin(id) {
  const store = getStore({ name: 'admins' });
  await store.delete(String(id));
}
async function isAdmin(id) {
  const store = getStore({ name: 'admins' });
  const val = await store.get(String(id));
  return Boolean(val);
}

exports.handler = async (event) => {
  if (event.httpMethod !== 'POST') return { statusCode: 200, body: 'OK' };
  if (!BOT_TOKEN || !WEBAPP_URL || !ADMIN_SECRET) return { statusCode: 500, body: 'Missing env' };

  let update;
  try { update = JSON.parse(event.body); } catch { return { statusCode: 200, body: 'no json' }; }
  const msg = update.message;
  const chatId = msg?.chat?.id;

  try {
    // /start ‚Äî –∫–Ω–æ–ø–∫–∞ WebApp
    if (msg?.text === '/start') {
      await tg('sendMessage', {
        chat_id: chatId,
        text: '–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫—Ä—É–∂–∫–æ–≤:',
        reply_markup: {
          keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –∫—Ä—É–∂–∫–∏', web_app: { url: WEBAPP_URL } }]],
          resize_keyboard: true, is_persistent: true
        }
      });
    }

    // /admin <code> ‚Äî –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –µ—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π
    if (msg?.text?.startsWith('/admin')) {
      const parts = msg.text.trim().split(/\s+/);
      const code = parts[1];
      if (!code) {
        await tg('sendMessage', { chat_id: chatId, text: '–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥: /admin <–∫–æ–¥>' });
      } else if (code === ADMIN_SECRET) {
        await addAdmin(chatId);
        await tg('sendMessage', { chat_id: chatId, text: '–ì–æ—Ç–æ–≤–æ. –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω ‚úÖ –û—Ç–∫—Ä–æ–π—Ç–µ WebApp –∑–∞–Ω–æ–≤–æ.' });
        if (ADMIN_CHAT_ID) {
          await tg('sendMessage', { chat_id: ADMIN_CHAT_ID, text: `üõ° –í—ã–¥–∞–ª –∞–¥–º–∏–Ω–∞ –¥–ª—è ${chatId}` });
        }
      } else {
        await tg('sendMessage', { chat_id: chatId, text: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ ‚ùå' });
      }
    }

    // /revoke ‚Äî —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ (–¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞)
    if (msg?.text === '/revoke') {
      await removeAdmin(chatId);
      await tg('sendMessage', { chat_id: chatId, text: '–ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á—ë–Ω.' });
    }

    // –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp (sendData)
    const wad = msg?.web_app_data;
    if (wad?.data) {
      let payload;
      try { payload = JSON.parse(wad.data); } catch { payload = { raw: wad.data }; }

      // –®–ª—ë–º –∞–¥–º–∏–Ω—É/–≤ —Ç–≤–æ–π —á–∞—Ç
      if (ADMIN_CHAT_ID) {
        await tg('sendMessage', {
          chat_id: ADMIN_CHAT_ID,
          parse_mode: 'HTML',
          text: `<b>WebApp –¥–∞–Ω–Ω—ã–µ</b>\n–û—Ç: @${msg.from?.username || '‚Äî'} (id ${msg.from?.id})\n\n<pre>${escapeHtml(JSON.stringify(payload, null, 2))}</pre>`
        });
      }
      await tg('sendMessage', { chat_id: chatId, text: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã ‚úÖ –°–ø–∞—Å–∏–±–æ!' });
    }
  } catch (e) {
    console.error('Handler e
