// netlify/functions/telegram.cjs
let _blobs; // –ª–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ require/esm
async function blobs() {
  if (_blobs) return _blobs;
  _blobs = await import('@netlify/blobs');
  return _blobs;
}

const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID; // –∫—É–¥–∞ —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const WEBAPP_URL = process.env.WEBAPP_URL;       // https://<—Ç–≤–æ–π>.netlify.app
const ADMIN_SECRET = process.env.ADMIN_SECRET;   // —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥

function escapeHtml(s = '') {
  return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}
async function tg(method, payload) {
  const res = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/${method}`, {
    method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload)
  });
  // –ø—Ä–æ–≥–ª–æ—Ç–∞–µ–º –æ—à–∏–±–∫–∏, –Ω–æ –∑–∞–ª–æ–≥–∏—Ä—É–µ–º
  if (!res.ok) {
    const txt = await res.text().catch(() => '');
    console.error('TG API error', method, res.status, txt);
  }
}

// helpers: —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –≤ Blobs
async function addAdmin(id) {
  const { getStore } = await blobs();
  const store = getStore({ name: 'admins' });
  await store.set(String(id), '1');
}
async function removeAdmin(id) {
  const { getStore } = await blobs();
  const store = getStore({ name: 'admins' });
  await store.delete(String(id));
}

exports.handler = async (event) => {
  if (event.httpMethod !== 'POST') return { statusCode: 200, body: 'OK' };
  if (!BOT_TOKEN || !WEBAPP_URL || !ADMIN_SECRET) return { statusCode: 500, body: 'Missing env' };

  let update;
  try { update = JSON.parse(event.body); } catch { return { statusCode: 200, body: 'no json' }; }
  const msg = update.message;
  const chatId = msg?.chat?.id;
  const from = msg?.from;

  try {
    // /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
    if (msg?.text === '/start') {
      await tg('sendMessage', {
        chat_id: chatId,
        text: '–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫—Ä—É–∂–∫–æ–≤:',
        reply_markup: {
          keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –∫—Ä—É–∂–∫–∏', web_app: { url: WEBAPP_URL } }]],
          resize_keyboard: true, is_persistent: true
        }
      });
    }

    // /admin <code> ‚Äî –≤–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω—Å—Ç–≤–æ –ø–æ —Å–µ–∫—Ä–µ—Ç—É
    if (msg?.text?.startsWith('/admin')) {
      const parts = msg.text.trim().split(/\s+/);
      const code = parts[1];
      if (!code) {
        await tg('sendMessage', { chat_id: chatId, text: '–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥: /admin <–∫–æ–¥>' });
      } else if (code === ADMIN_SECRET) {
        // 1) –°—Ä–∞–∑—É –æ—Ç–≤–µ—Ç ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∏–¥–µ–ª —Ç–∏—à–∏–Ω—É
        await tg('sendMessage', { chat_id: chatId, text: '–ö–æ–¥ –≤–µ—Ä–Ω—ã–π ‚úÖ –í–∫–ª—é—á–∞—é –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º‚Ä¶' });
        // 2) –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å
        try {
          await addAdmin(chatId);
          await tg('sendMessage', { chat_id: chatId, text: '–ì–æ—Ç–æ–≤–æ. –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω ‚úÖ –û—Ç–∫—Ä–æ–π—Ç–µ WebApp –∑–∞–Ω–æ–≤–æ.' });
          if (ADMIN_CHAT_ID) {
            await tg('sendMessage', { chat_id: ADMIN_CHAT_ID, text: `üõ° –í—ã–¥–∞–Ω –∞–¥–º–∏–Ω –¥–ª—è ${chatId} (@${from?.username||'‚Äî'})` });
          }
        } catch (e) {
          console.error('addAdmin error', e);
          await tg('sendMessage', { chat_id: chatId, text: '–ö–æ–¥ –≤–µ—Ä–Ω—ã–π, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ üòï –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.' });
          if (ADMIN_CHAT_ID) {
            await tg('sendMessage', { chat_id: ADMIN_CHAT_ID, text: `‚ùóÔ∏è–û—à–∏–±–∫–∞ addAdmin –¥–ª—è ${chatId}: ${String(e)}` });
          }
        }
      } else {
        await tg('sendMessage', { chat_id: chatId, text: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ ‚ùå' });
      }
    }

    // /revoke ‚Äî —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞
    if (msg?.text === '/revoke') {
      try {
        await removeAdmin(chatId);
        await tg('sendMessage', { chat_id: chatId, text: '–ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á—ë–Ω.' });
      } catch (e) {
        console.error('removeAdmin error', e);
        await tg('sendMessage', { chat_id: chatId, text: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.' });
      }
    }

    // –î–∞–Ω–Ω—ã–µ –∏–∑ WebApp
    const wad = msg?.web_app_data;
    if (wad?.data) {
      let payload;
      try { payload = JSON.parse(wad.data); } catch { payload = { raw: wad.data }; }

      if (ADMIN_CHAT_ID) {
        await tg('sendMessage', {
          chat_id: ADMIN_CHAT_ID,
          parse_mode: 'HTML',
          text: `<b>WebApp –¥–∞–Ω–Ω—ã–µ</b>\n–û—Ç: @${from?.username || '‚Äî'} (id ${from?.id})\n\n<pre>${escapeHtml(JSON.stringify(payload, null, 2))}</pre>`
        });
      }
      await tg('sendMessage', { chat_id: chatId, text: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã ‚úÖ –°–ø–∞—Å–∏–±–æ!' });
    }
  } catch (e) {
    console.error('Handler error', e);
  }
  return { statusCode: 200, body: 'OK' };
};
