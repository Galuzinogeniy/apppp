// ESM webhook –¥–ª—è Telegram. –ó–∞—â–∏—â—ë–Ω –æ—Ç –ø–∞–¥–µ–Ω–∏–π.
// –†–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Blobs –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–ø—Ä–æ—Å—Ç–æ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç –∞–¥–º–∏–Ω–∞, –Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç).

let store = null;
async function ensureStore() {
  if (store) return store;
  try {
    const mod = await import('@netlify/blobs');
    store = mod.getStore({ name: 'admins' });
  } catch (e) {
    console.error('Blobs unavailable:', e);
    store = null; // –Ω–µ –ø–∞–¥–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –ø–µ—Ä—Å–∏—Å—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  }
  return store;
}

const BOT_TOKEN     = process.env.BOT_TOKEN;
const WEBAPP_URL    = process.env.WEBAPP_URL;
const ADMIN_SECRET  = process.env.ADMIN_SECRET || ""; // –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID || ""; // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

function escapeHtml(s = '') {
  return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}
async function tg(method, payload) {
  if (!BOT_TOKEN) return;
  const res = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/${method}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload),
  }).catch(e => ({ ok:false, statusText:String(e) }));
  if (!res?.ok) {
    let t = '';
    try { t = await res.text(); } catch {}
    console.error('TG API error', method, res?.status, t || res?.statusText);
  }
}

async function addAdmin(chatId) {
  const s = await ensureStore();
  if (!s) throw new Error('blobs_unavailable');
  await s.set(String(chatId), '1');
}
async function removeAdmin(chatId) {
  const s = await ensureStore();
  if (!s) throw new Error('blobs_unavailable');
  await s.delete(String(chatId));
}

export async function handler(event) {
  // Telegram —à–ª—ë—Ç POST; –Ω–∞ GET –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º –û–ö (–¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
  if (event.httpMethod !== 'POST') return { statusCode: 200, body: 'OK' };

  // –î–ª—è /start –∏ –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫ –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã —ç—Ç–æ:
  if (!BOT_TOKEN || !WEBAPP_URL) {
    console.error('Missing BOT_TOKEN or WEBAPP_URL');
    return { statusCode: 200, body: 'OK' }; // –Ω–µ 500, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
  }

  let update;
  try { update = JSON.parse(event.body); } catch {
    return { statusCode: 200, body: 'OK' };
  }

  const msg    = update.message;
  const chatId = msg?.chat?.id;
  const from   = msg?.from;

  try {
    // /start ‚Äî –¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
    if (msg?.text === '/start') {
      await tg('sendMessage', {
        chat_id: chatId,
        text: '–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫—Ä—É–∂–∫–æ–≤:',
        reply_markup: {
          keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –∫—Ä—É–∂–∫–∏', web_app: { url: WEBAPP_URL } }]],
          resize_keyboard: true,
          is_persistent: true,
        },
      });
    }

    // /admin <code> ‚Äî –≤–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω—Å—Ç–≤–æ –ø–æ —Å–µ–∫—Ä–µ—Ç—É (–µ—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if (msg?.text?.startsWith('/admin')) {
      const parts = msg.text.trim().split(/\s+/);
      const code  = parts[1];

      if (!ADMIN_SECRET) {
        await tg('sendMessage', { chat_id: chatId, text: '–ê–¥–º–∏–Ω-—Å–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.' });
      } else if (!code) {
        await tg('sendMessage', { chat_id: chatId, text: '–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥: /admin <–∫–æ–¥>' });
      } else if (code === ADMIN_SECRET) {
        await tg('sendMessage', { chat_id: chatId, text: '–ö–æ–¥ –≤–µ—Ä–Ω—ã–π ‚úÖ –í–∫–ª—é—á–∞—é –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º‚Ä¶' });
        try {
          await addAdmin(chatId);
          await tg('sendMessage', { chat_id: chatId, text: '–ì–æ—Ç–æ–≤–æ. –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω ‚úÖ –û—Ç–∫—Ä–æ–π—Ç–µ WebApp –∑–∞–Ω–æ–≤–æ.' });
          if (ADMIN_CHAT_ID) {
            await tg('sendMessage', { chat_id: ADMIN_CHAT_ID, text: `üõ° –í—ã–¥–∞–Ω –∞–¥–º–∏–Ω –¥–ª—è ${chatId} (@${from?.username || '‚Äî'})` });
          }
        } catch (e) {
          console.error('addAdmin error', e);
          await tg('sendMessage', { chat_id: chatId, text: '–ö–æ–¥ –≤–µ—Ä–Ω—ã–π, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ üòï –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.' });
          if (ADMIN_CHAT_ID) {
            await tg('sendMessage', { chat_id: ADMIN_CHAT_ID, text: `‚ùóÔ∏è–û—à–∏–±–∫–∞ addAdmin –¥–ª—è ${chatId}: ${String(e)}` });
          }
        }
      } else {
        await tg('sendMessage', { chat_id: chatId, text: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ ‚ùå' });
      }
    }

    // /revoke ‚Äî —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞
    if (msg?.text === '/revoke') {
      try {
        await removeAdmin(chatId);
        await tg('sendMessage', { chat_id: chatId, text: '–ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á—ë–Ω.' });
      } catch (e) {
        console.error('removeAdmin error', e);
        await tg('sendMessage', { chat_id: chatId, text: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ (—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ).' });
      }
    }

    // –î–∞–Ω–Ω—ã–µ –∏–∑ WebApp (Telegram.WebApp.sendData)
    const wad = msg?.web_app_data;
    if (wad?.data) {
      let payload;
      try { payload = JSON.parse(wad.data); } catch { payload = { raw: wad.data }; }

      if (ADMIN_CHAT_ID) {
        await tg('sendMessage', {
          chat_id: ADMIN_CHAT_ID,
          parse_mode: 'HTML',
          text:
            `<b>WebApp –¥–∞–Ω–Ω—ã–µ</b>\n` +
            `–û—Ç: @${from?.username || '‚Äî'} (id ${from?.id})\n\n` +
            `<pre>${escapeHtml(JSON.stringify(payload, null, 2))}</pre>`
        });
      }
      await tg('sendMessage', { chat_id: chatId, text: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã ‚úÖ –°–ø–∞—Å–∏–±–æ!' });
    }
  } catch (e) {
    console.error('Handler error', e);
  }

  return { statusCode: 200, body: 'OK' };
}
